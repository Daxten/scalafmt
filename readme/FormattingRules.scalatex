@import Main._
@import org.scalafmt.readme.Readme._
@import org.scalafmt.config.ScalafmtStyle
@import org.scalafmt.config.ScalafmtStyle.default

@sect{Formatting rules}
  @p
    @note. The rules are still evolving. Feel free to discuss about them in
    the gitter channel. To start with, I implemented a default style that I
    like myself.

  @p
    The plan is to later add support for few official coding styles that have
    proven to work for large codebases and scale to at least a few dozens
    of contributors. For example, from
    @lnk("Scala.js", "https://github.com/scala-js/scala-js/blob/master/CODINGSTYLE.md") and
    @lnk("Spark", "https://cwiki.apache.org/confluence/display/SPARK/Spark+Code+Style+Guide").

  @sect{Function application}

    @example
      // 40 columns                          |
      object FunctionApplication {
        // 1. Fits on a single line
        function(arg1, arg2, arg3)

        // 2. One line for each argument, indented at (
        function(longerArg1, longerArg2, longerArg3)

        // 3. One line for each argument, indented at 4
        function(superDuperLongArg(
            evenHasNestedArgs, notOnlyOneButTwo), // This arg is too long.
            arg2IsNotAsBad)

        // 4. (opt-in) "Config style", put newline after opening (
        // and newline before closing ) to force one argument
        // on each line indented by 4. Overrides other options.
        function(
            longerArg1 = defaultValue1, longerArg2 = defaultValue2, longerArg3 = defaultValue3
            ) // Closing ) gets a newline
      }

    These rules are re-used in the following contexts:
    @ul
      @li
        Curried functions. Rules are applied on each individual pair of
        parentheses independently from each other.
      @li
        Function declaration. No difference, default values
         are treated like named argument.
      @li
        Type application. Same rules, except for brackets @code("[]") instead
        of parentheses.

  @sect{Select chains}

    @example
      // 40 columns                          |
      object SelectChains {
        // 1. Fits on a single line
        List(1).map(_ + 1).filter(_ == 2)

        // 2. Force newline at each dot, with indent 2.
        List(1, 2, 3, 4)
          .map(_ + 1)
          .filter(_ % 2 == 0)
      }

  @sect{Pattern matching}

    @example
      // 40 columns                          |
      object PatternMatching {
        List(1, 2, 3) match {
          // if indented by 2, for separation from the case body.
          case 1 :: tail if tail.length == 2 => "1 is head"
          // if put on separate line, if condition doesn't fit on single line
          case lst if lst.length == 2 && lst.head == 1 => "lst has length 3"
        }
      }

